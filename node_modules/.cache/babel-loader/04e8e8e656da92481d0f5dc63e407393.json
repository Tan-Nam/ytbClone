{"ast":null,"code":"import { SUCCESS, FAILURE, REQUEST } from '../action';\nimport { createSelector } from 'reselect';\nimport { COMMENT_LIST } from '../action/comment';\nconst initialState = {\n  byVideo: [],\n  isLoading: true,\n  hasError: null\n};\nexport function commentReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case COMMENT_LIST[SUCCESS]:\n      return fetchCommentList(action.response, action.videoId, state);\n\n    case COMMENT_LIST[REQUEST]:\n      return resetLoadingState(state);\n\n    case COMMENT_LIST[FAILURE]:\n      return handleErrorResponse(action.response, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction fetchCommentList(response, videoId, state) {\n  if (!response) {\n    return state;\n  } // const commentList = response.data.items.reduce((acc: any, item: any) => {\n  //   acc[item.id] = item;\n  //   return acc;\n  // }, {});\n\n\n  const commentList = response.data.items;\n  return { ...state,\n    byVideo: commentList\n  };\n}\n\nfunction handleErrorResponse(response, state) {\n  return { ...state,\n    hasError: JSON.stringify(response)\n  };\n}\n\nfunction resetLoadingState(state) {\n  return { ...state,\n    isLoading: true\n  };\n} //selector\n\n\nexport const getCommentForVideo = createSelector(state => state.comment.byVideo, commentList => {\n  return commentList;\n});","map":{"version":3,"sources":["E:/fileExFrZip/RFP/src/state/reducer/comment.ts"],"names":["SUCCESS","FAILURE","REQUEST","createSelector","COMMENT_LIST","initialState","byVideo","isLoading","hasError","commentReducer","state","action","type","fetchCommentList","response","videoId","resetLoadingState","handleErrorResponse","commentList","data","items","JSON","stringify","getCommentForVideo","comment"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,OAA3B,QAA0C,WAA1C;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,OAAO,SAASC,cAAT,GAAgE;AAAA,MAAxCC,KAAwC,uEAA3BL,YAA2B;AAAA,MAAbM,MAAa;;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,YAAY,CAACJ,OAAD,CAAjB;AACE,aAAOa,gBAAgB,CAACF,MAAM,CAACG,QAAR,EAAkBH,MAAM,CAACI,OAAzB,EAAkCL,KAAlC,CAAvB;;AACF,SAAKN,YAAY,CAACF,OAAD,CAAjB;AACE,aAAOc,iBAAiB,CAACN,KAAD,CAAxB;;AACF,SAAKN,YAAY,CAACH,OAAD,CAAjB;AACE,aAAOgB,mBAAmB,CAACN,MAAM,CAACG,QAAR,EAAkBJ,KAAlB,CAA1B;;AACF;AACE,aAAOA,KAAP;AARJ;AAUD;;AAED,SAASG,gBAAT,CAA0BC,QAA1B,EAAyCC,OAAzC,EAAuDL,KAAvD,EAAmE;AACjE,MAAI,CAACI,QAAL,EAAe;AACb,WAAOJ,KAAP;AACD,GAHgE,CAIjE;AACA;AACA;AACA;;;AACA,QAAMQ,WAAW,GAAGJ,QAAQ,CAACK,IAAT,CAAcC,KAAlC;AAEA,SAAO,EACL,GAAGV,KADE;AAELJ,IAAAA,OAAO,EAAEY;AAFJ,GAAP;AAID;;AAED,SAASD,mBAAT,CAA6BH,QAA7B,EAA4CJ,KAA5C,EAAwD;AACtD,SAAO,EACL,GAAGA,KADE;AAELF,IAAAA,QAAQ,EAAEa,IAAI,CAACC,SAAL,CAAeR,QAAf;AAFL,GAAP;AAID;;AAED,SAASE,iBAAT,CAA2BN,KAA3B,EAAuC;AACrC,SAAO,EACL,GAAGA,KADE;AAELH,IAAAA,SAAS,EAAE;AAFN,GAAP;AAID,C,CACD;;;AAEA,OAAO,MAAMgB,kBAAkB,GAAGpB,cAAc,CAC7CO,KAAD,IAAgBA,KAAK,CAACc,OAAN,CAAclB,OADgB,EAE7CY,WAAD,IAAsB;AACpB,SAAOA,WAAP;AACD,CAJ6C,CAAzC","sourcesContent":["import { SUCCESS, FAILURE, REQUEST } from '../action';\r\nimport { createSelector } from 'reselect';\r\nimport { COMMENT_LIST } from '../action/comment';\r\n\r\nconst initialState = {\r\n  byVideo: [],\r\n  isLoading: true,\r\n  hasError: null,\r\n};\r\n\r\nexport function commentReducer(state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case COMMENT_LIST[SUCCESS]:\r\n      return fetchCommentList(action.response, action.videoId, state);\r\n    case COMMENT_LIST[REQUEST]:\r\n      return resetLoadingState(state);\r\n    case COMMENT_LIST[FAILURE]:\r\n      return handleErrorResponse(action.response, state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction fetchCommentList(response: any, videoId: any, state: any) {\r\n  if (!response) {\r\n    return state;\r\n  }\r\n  // const commentList = response.data.items.reduce((acc: any, item: any) => {\r\n  //   acc[item.id] = item;\r\n  //   return acc;\r\n  // }, {});\r\n  const commentList = response.data.items;\r\n\r\n  return {\r\n    ...state,\r\n    byVideo: commentList,\r\n  };\r\n}\r\n\r\nfunction handleErrorResponse(response: any, state: any) {\r\n  return {\r\n    ...state,\r\n    hasError: JSON.stringify(response),\r\n  };\r\n}\r\n\r\nfunction resetLoadingState(state: any) {\r\n  return {\r\n    ...state,\r\n    isLoading: true,\r\n  };\r\n}\r\n//selector\r\n\r\nexport const getCommentForVideo = createSelector(\r\n  (state: any) => state.comment.byVideo,\r\n  (commentList: any) => {\r\n    return commentList;\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}