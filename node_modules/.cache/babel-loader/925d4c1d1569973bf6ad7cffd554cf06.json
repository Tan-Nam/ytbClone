{"ast":null,"code":"import { all, put, fork, call } from 'redux-saga/effects';\nimport { watchMostPopularVideo, watchCreateNewVideo } from './video';\nimport { watchVideoDetail, watchUpdateVideoDetail } from './watch';\nimport { watchCommentList } from './comment';\nexport default function* () {\n  yield all([fork(watchMostPopularVideo), fork(watchVideoDetail), fork(watchUpdateVideoDetail), fork(watchCreateNewVideo), fork(watchCommentList)]);\n}\nexport function* fetchEntity(request, param, entity) {\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    args[_key - 3] = arguments[_key];\n  }\n\n  try {\n    const response = yield call(request, param);\n    yield put(entity.success(response, ...args));\n  } catch (error) {\n    yield put(entity.failure(error, ...args));\n  }\n}","map":{"version":3,"sources":["E:/fileExFrZip/RFP/src/state/saga/index.ts"],"names":["all","put","fork","call","watchMostPopularVideo","watchCreateNewVideo","watchVideoDetail","watchUpdateVideoDetail","watchCommentList","fetchEntity","request","param","entity","args","response","success","error","failure"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,SAA3D;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,SAAzD;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAGA,eAAe,aAAa;AAC1B,QAAMR,GAAG,CAAC,CACRE,IAAI,CAACE,qBAAD,CADI,EAERF,IAAI,CAACI,gBAAD,CAFI,EAGRJ,IAAI,CAACK,sBAAD,CAHI,EAIRL,IAAI,CAACG,mBAAD,CAJI,EAKRH,IAAI,CAACM,gBAAD,CALI,CAAD,CAAT;AAOD;AAED,OAAO,UAAUC,WAAV,CAAsBC,OAAtB,EAAoCC,KAApC,EAAgDC,MAAhD,EAA2E;AAAA,oCAAXC,IAAW;AAAXA,IAAAA,IAAW;AAAA;;AAChF,MAAI;AACF,UAAMC,QAA2B,GAAG,MAAMX,IAAI,CAACO,OAAD,EAAUC,KAAV,CAA9C;AACA,UAAMV,GAAG,CAACW,MAAM,CAACG,OAAP,CAAeD,QAAf,EAAyB,GAAGD,IAA5B,CAAD,CAAT;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACd,UAAMf,GAAG,CAACW,MAAM,CAACK,OAAP,CAAeD,KAAf,EAAsB,GAAGH,IAAzB,CAAD,CAAT;AACD;AACF","sourcesContent":["import { all, put, fork, call } from 'redux-saga/effects';\r\nimport { watchMostPopularVideo, watchCreateNewVideo } from './video';\r\nimport { watchVideoDetail, watchUpdateVideoDetail } from './watch';\r\nimport { watchCommentList } from './comment';\r\nimport { ResponseGenerator } from '../../model/common';\r\n\r\nexport default function* () {\r\n  yield all([\r\n    fork(watchMostPopularVideo),\r\n    fork(watchVideoDetail),\r\n    fork(watchUpdateVideoDetail),\r\n    fork(watchCreateNewVideo),\r\n    fork(watchCommentList),\r\n  ]);\r\n}\r\n\r\nexport function* fetchEntity(request: any, param: any, entity: any, ...args: any) {\r\n  try {\r\n    const response: ResponseGenerator = yield call(request, param);\r\n    yield put(entity.success(response, ...args));\r\n  } catch (error) {\r\n    yield put(entity.failure(error, ...args));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}