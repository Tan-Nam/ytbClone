{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { FAILURE, REQUEST, SUCCESS } from '../action';\nimport { GET_VIDEO_ID, MOST_POPULAR_ONLINE, CREATE_NEW_VIDEO } from '../action/video';\nimport { WATCH_DETAIL, WATCH_UPDATE } from '../action/watch';\nexport const initialState = {\n  byId: {},\n  mostPopular: [],\n  totalPage: -1,\n  currentVideo: {},\n  isLoading: true,\n  hasError: null\n};\nexport function videoReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case MOST_POPULAR_ONLINE[SUCCESS]:\n      return fetchMostPopularVideo(action.response, state);\n\n    case MOST_POPULAR_ONLINE[REQUEST]:\n      return resetLoadingState(state);\n\n    case MOST_POPULAR_ONLINE[FAILURE]:\n      return handleErrorResponse(action.response, state);\n    //\n\n    case WATCH_DETAIL[SUCCESS]:\n      return fetchVideoDetail(action.response, state);\n\n    case WATCH_DETAIL[REQUEST]:\n      return resetLoadingState(state);\n\n    case WATCH_DETAIL[FAILURE]:\n      return handleErrorResponse(action.response, state);\n    //\n\n    case WATCH_UPDATE[SUCCESS]:\n      return fetchVideoDetail(action.response, state);\n\n    case WATCH_UPDATE[REQUEST]:\n      return resetLoadingState(state);\n\n    case WATCH_UPDATE[FAILURE]:\n      return handleErrorResponse(action.response, state);\n    //\n\n    case CREATE_NEW_VIDEO[REQUEST]:\n      return resetLoadingState(state);\n\n    case CREATE_NEW_VIDEO[SUCCESS]:\n      return updateVideoList(action.response, state);\n\n    case CREATE_NEW_VIDEO[FAILURE]:\n      return handleErrorResponse(action.response, state);\n    //\n\n    case GET_VIDEO_ID:\n      return filterVideoById(action.videoId, state);\n    //\n\n    default:\n      return state;\n  }\n}\n\nfunction fetchMostPopularVideo(response, state) {\n  const videoList = response.data.reduce((acc, video) => {\n    acc[video.id] = video;\n    return acc;\n  }, {});\n  const item = Object.keys(videoList);\n  const totalPage = response.headers['x-total-count'];\n  return { ...state,\n    mostPopular: item,\n    byId: { ...state.byId,\n      ...videoList\n    },\n    totalPage: totalPage,\n    isLoading: false,\n    hasError: null\n  };\n}\n\nfunction fetchVideoDetail(response, state) {\n  const videoId = response.data.id;\n  return { ...state,\n    byId: { ...state.byId,\n      [videoId]: { ...response.data\n      }\n    },\n    currentVideo: { ...state.currentVideo,\n      ...response.data\n    },\n    isLoading: false,\n    hasError: null\n  };\n}\n\nfunction filterVideoById(videoId, state) {\n  return { ...state,\n    currentVideo: state.byId[videoId],\n    isLoading: false,\n    hasError: null\n  };\n}\n\nfunction updateVideoList(response, state) {\n  const newVideoId = response.data.id;\n  const newVideoDetail = response.data;\n  const newVideo = {};\n  newVideo[newVideoId] = newVideoDetail;\n  return { ...state,\n    byId: { ...state.byId,\n      ...newVideo\n    },\n    mostPopular: [newVideoId, ...state.mostPopular],\n    isLoading: false,\n    hasError: null\n  };\n}\n\nfunction resetLoadingState(state) {\n  return { ...state,\n    isLoading: true\n  };\n}\n\nfunction handleErrorResponse(response, state) {\n  return { ...state,\n    hasError: JSON.stringify(response.data) || 'not found'\n  };\n} // selector\n\n\nexport const getMostPopularVideo = createSelector(state => state.video.byId, state => state.video.mostPopular, state => state.video.totalPage, (videoById, mostPopular, totalPage) => {\n  if (!mostPopular) {\n    return {\n      data: [],\n      totalPage: 50\n    };\n  }\n\n  return {\n    data: mostPopular.map(videoId => videoById[videoId]),\n    totalPage: parseInt(totalPage)\n  };\n});\nexport const getVideoListId = createSelector(state => state.video.mostPopular, videoListId => {\n  return videoListId;\n});\nexport const getVideoById = createSelector(state => state.video.currentVideo, videoById => {\n  if (videoById) {\n    return videoById;\n  }\n\n  return null;\n});\nexport const getLoading = createSelector(state => state.video.isLoading, isLoading => {\n  return isLoading;\n});\nexport const getError = createSelector(state => state.video.hasError, hasError => {\n  return hasError;\n});","map":{"version":3,"sources":["E:/fileExFrZip/RFP/src/state/reducer/video.ts"],"names":["createSelector","FAILURE","REQUEST","SUCCESS","GET_VIDEO_ID","MOST_POPULAR_ONLINE","CREATE_NEW_VIDEO","WATCH_DETAIL","WATCH_UPDATE","initialState","byId","mostPopular","totalPage","currentVideo","isLoading","hasError","videoReducer","state","action","type","fetchMostPopularVideo","response","resetLoadingState","handleErrorResponse","fetchVideoDetail","updateVideoList","filterVideoById","videoId","videoList","data","reduce","acc","video","id","item","Object","keys","headers","newVideoId","newVideoDetail","newVideo","JSON","stringify","getMostPopularVideo","videoById","map","parseInt","getVideoListId","videoListId","getVideoById","getLoading","getError"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\r\nimport { FAILURE, REQUEST, SUCCESS } from '../action';\r\nimport { GET_VIDEO_ID, MOST_POPULAR_ONLINE, CREATE_NEW_VIDEO } from '../action/video';\r\nimport { WATCH_DETAIL, WATCH_UPDATE } from '../action/watch';\r\n\r\nexport const initialState = {\r\n  byId: {},\r\n  mostPopular: [],\r\n  totalPage: -1,\r\n  currentVideo: {},\r\n  isLoading: true,\r\n  hasError: null,\r\n};\r\n\r\nexport function videoReducer(state: any = initialState, action: any) {\r\n  switch (action.type) {\r\n    case MOST_POPULAR_ONLINE[SUCCESS]:\r\n      return fetchMostPopularVideo(action.response, state);\r\n    case MOST_POPULAR_ONLINE[REQUEST]:\r\n      return resetLoadingState(state);\r\n    case MOST_POPULAR_ONLINE[FAILURE]:\r\n      return handleErrorResponse(action.response, state);\r\n    //\r\n    case WATCH_DETAIL[SUCCESS]:\r\n      return fetchVideoDetail(action.response, state);\r\n    case WATCH_DETAIL[REQUEST]:\r\n      return resetLoadingState(state);\r\n    case WATCH_DETAIL[FAILURE]:\r\n      return handleErrorResponse(action.response, state);\r\n    //\r\n    case WATCH_UPDATE[SUCCESS]:\r\n      return fetchVideoDetail(action.response, state);\r\n    case WATCH_UPDATE[REQUEST]:\r\n      return resetLoadingState(state);\r\n    case WATCH_UPDATE[FAILURE]:\r\n      return handleErrorResponse(action.response, state);\r\n    //\r\n    case CREATE_NEW_VIDEO[REQUEST]:\r\n      return resetLoadingState(state);\r\n    case CREATE_NEW_VIDEO[SUCCESS]:\r\n      return updateVideoList(action.response, state);\r\n    case CREATE_NEW_VIDEO[FAILURE]:\r\n      return handleErrorResponse(action.response, state);\r\n    //\r\n    case GET_VIDEO_ID:\r\n      return filterVideoById(action.videoId, state);\r\n    //\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction fetchMostPopularVideo(response: any, state: any) {\r\n  const videoList = response.data.reduce((acc: any, video: any) => {\r\n    acc[video.id] = video;\r\n    return acc;\r\n  }, {});\r\n  const item = Object.keys(videoList);\r\n\r\n  const totalPage = response.headers['x-total-count'];\r\n\r\n  return {\r\n    ...state,\r\n    mostPopular: item,\r\n    byId: { ...state.byId, ...videoList },\r\n    totalPage: totalPage,\r\n    isLoading: false,\r\n    hasError: null,\r\n  };\r\n}\r\n\r\nfunction fetchVideoDetail(response: any, state: any) {\r\n  const videoId = response.data.id;\r\n  return {\r\n    ...state,\r\n    byId: {\r\n      ...state.byId,\r\n      [videoId]: {\r\n        ...response.data,\r\n      },\r\n    },\r\n    currentVideo: { ...state.currentVideo, ...response.data },\r\n    isLoading: false,\r\n    hasError: null,\r\n  };\r\n}\r\n\r\nfunction filterVideoById(videoId: any, state: any) {\r\n  return {\r\n    ...state,\r\n    currentVideo: state.byId[videoId],\r\n    isLoading: false,\r\n    hasError: null,\r\n  };\r\n}\r\n\r\nfunction updateVideoList(response: any, state: any) {\r\n  const newVideoId = response.data.id;\r\n  const newVideoDetail = response.data;\r\n  const newVideo: any = {};\r\n  newVideo[newVideoId] = newVideoDetail;\r\n  return {\r\n    ...state,\r\n    byId: { ...state.byId, ...newVideo },\r\n    mostPopular: [newVideoId, ...state.mostPopular],\r\n    isLoading: false,\r\n    hasError: null,\r\n  };\r\n}\r\n\r\nfunction resetLoadingState(state: any) {\r\n  return {\r\n    ...state,\r\n    isLoading: true,\r\n  };\r\n}\r\n\r\nfunction handleErrorResponse(response: any, state: any) {\r\n  return {\r\n    ...state,\r\n    hasError: JSON.stringify(response.data) || 'not found',\r\n  };\r\n}\r\n\r\n// selector\r\nexport const getMostPopularVideo = createSelector(\r\n  (state: any) => state.video.byId,\r\n  (state: any) => state.video.mostPopular,\r\n  (state: any) => state.video.totalPage,\r\n  (videoById, mostPopular, totalPage) => {\r\n    if (!mostPopular) {\r\n      return {\r\n        data: [],\r\n        totalPage: 50,\r\n      };\r\n    }\r\n    return {\r\n      data: mostPopular.map((videoId: any) => videoById[videoId]),\r\n      totalPage: parseInt(totalPage),\r\n    };\r\n  }\r\n);\r\n\r\nexport const getVideoListId = createSelector(\r\n  (state: any) => state.video.mostPopular,\r\n  (videoListId: any) => {\r\n    return videoListId;\r\n  }\r\n);\r\n\r\nexport const getVideoById = createSelector(\r\n  (state: any) => state.video.currentVideo,\r\n  (videoById) => {\r\n    if (videoById) {\r\n      return videoById;\r\n    }\r\n    return null;\r\n  }\r\n);\r\n\r\nexport const getLoading = createSelector(\r\n  (state: any) => state.video.isLoading,\r\n  (isLoading) => {\r\n    return isLoading;\r\n  }\r\n);\r\n\r\nexport const getError = createSelector(\r\n  (state: any) => state.video.hasError,\r\n  (hasError) => {\r\n    return hasError;\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}