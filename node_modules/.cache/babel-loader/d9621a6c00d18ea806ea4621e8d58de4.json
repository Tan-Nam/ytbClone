{"ast":null,"code":"var _jsxFileName = \"E:\\\\fileExFrZip\\\\RFP\\\\src\\\\component\\\\video-info-box\\\\video-info-box.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Image } from 'semantic-ui-react';\nimport { Query } from '../../access/api/index';\nimport Linkify from 'react-linkify';\nimport { Button } from '../button/button';\nimport './video-info-box.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DescriptionParagraphs = _ref => {\n  let {\n    video,\n    descriptionTextClass\n  } = _ref;\n  const videoDescription = video.snippet ? video.snippet.description : null;\n\n  if (!videoDescription) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: descriptionTextClass,\n    children: videoDescription.split('\\n').map((paragraph, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Linkify, {\n        children: paragraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = DescriptionParagraphs;\nexport function VideoInfoBox(props) {\n  _s();\n\n  const {\n    video,\n    channelId\n  } = props;\n  const [channel, setChannel] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState();\n  const [collapsed, setCollapsed] = useState(true);\n  const {\n    descriptionTextClass,\n    buttonTitle\n  } = getDescriptionText();\n  const publishedAtString = video.snippet.publishedAt || ''; //\n\n  function getDescriptionText() {\n    let descriptionTextClass = 'collapsed';\n    let buttonTitle = 'Show More';\n\n    if (!collapsed) {\n      descriptionTextClass = 'expanded';\n      buttonTitle = 'Show Less';\n    }\n\n    return {\n      descriptionTextClass,\n      buttonTitle\n    };\n  }\n\n  const onToggleCollapseButtonClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  const getSubscriberButtonText = () => {\n    if (channel) {\n      // const subscriberCount = channel;\n      return `Subscribe 10M`;\n    }\n  }; //fecth channel information\n\n\n  useEffect(() => {\n    let relevant = true;\n\n    const fetchChannel = async () => {\n      try {\n        setIsLoading(true);\n        const response = await Query.channel.list({\n          channelId\n        });\n\n        if (response && relevant) {\n          setChannel(response.data.items[0]);\n          setIsLoading(false);\n        }\n      } catch (error) {\n        if (relevant) {\n          setHasError(error);\n        }\n      } finally {\n        if (relevant) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    fetchChannel();\n    return () => {\n      relevant = false;\n    };\n  }, [channelId]);\n\n  if (!video) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-info-box\",\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        className: \"channel-image\",\n        src: channel.snippet.thumbnails.medium.url,\n        circular: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"channel-name\",\n          children: channel.snippet.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-publication-date\",\n          children: publishedAtString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"subscribe\",\n        color: \"youtube\",\n        children: getSubscriberButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-description\",\n        children: [/*#__PURE__*/_jsxDEV(DescriptionParagraphs, {\n          video: video,\n          descriptionTextClass: descriptionTextClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onToggleCollapseButtonClick,\n          children: buttonTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), hasError && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"something wrong\"\n    }, void 0, false)]\n  }, void 0, true);\n}\n\n_s(VideoInfoBox, \"PdZaTRcFc7QEfheo4tPODew7hBk=\");\n\n_c2 = VideoInfoBox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DescriptionParagraphs\");\n$RefreshReg$(_c2, \"VideoInfoBox\");","map":{"version":3,"sources":["E:/fileExFrZip/RFP/src/component/video-info-box/video-info-box.tsx"],"names":["useState","useEffect","Image","Query","Linkify","Button","DescriptionParagraphs","video","descriptionTextClass","videoDescription","snippet","description","split","map","paragraph","index","VideoInfoBox","props","channelId","channel","setChannel","isLoading","setIsLoading","hasError","setHasError","collapsed","setCollapsed","buttonTitle","getDescriptionText","publishedAtString","publishedAt","onToggleCollapseButtonClick","getSubscriberButtonText","relevant","fetchChannel","response","list","data","items","error","thumbnails","medium","url","title"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Image, Divider } from 'semantic-ui-react';\nimport { Query } from '../../access/api/index';\nimport Linkify from 'react-linkify';\nimport { Button } from '../button/button';\nimport './video-info-box.scss';\n\nexport type DescriptionParagraphsProps = {\n  video: any;\n  descriptionTextClass: string;\n};\n\nexport const DescriptionParagraphs = ({ video, descriptionTextClass }: DescriptionParagraphsProps) => {\n  const videoDescription = video.snippet ? video.snippet.description : null;\n  if (!videoDescription) {\n    return null;\n  }\n\n  return (\n    <div className={descriptionTextClass}>\n      {videoDescription.split('\\n').map((paragraph: any, index: number) => (\n        <p key={index}>\n          <Linkify>{paragraph}</Linkify>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport function VideoInfoBox(props: any) {\n  const { video, channelId } = props;\n  const [channel, setChannel] = useState<any | undefined>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState<any | undefined>();\n  const [collapsed, setCollapsed] = useState(true);\n\n  const { descriptionTextClass, buttonTitle } = getDescriptionText();\n  const publishedAtString = video.snippet.publishedAt || '';\n\n  //\n  function getDescriptionText() {\n    let descriptionTextClass = 'collapsed';\n    let buttonTitle = 'Show More';\n    if (!collapsed) {\n      descriptionTextClass = 'expanded';\n      buttonTitle = 'Show Less';\n    }\n    return {\n      descriptionTextClass,\n      buttonTitle,\n    };\n  }\n\n  const onToggleCollapseButtonClick = () => {\n    setCollapsed(!collapsed);\n  };\n\n  const getSubscriberButtonText = () => {\n    if (channel) {\n      // const subscriberCount = channel;\n      return `Subscribe 10M`;\n    }\n  };\n\n  //fecth channel information\n  useEffect(() => {\n    let relevant = true;\n    const fetchChannel = async () => {\n      try {\n        setIsLoading(true);\n        const response: any = await Query.channel.list({ channelId });\n        if (response && relevant) {\n          setChannel(response.data.items[0]);\n          setIsLoading(false);\n        }\n      } catch (error) {\n        if (relevant) {\n          setHasError(error);\n        }\n      } finally {\n        if (relevant) {\n          setIsLoading(false);\n        }\n      }\n    };\n    fetchChannel();\n    return () => {\n      relevant = false;\n    };\n  }, [channelId]);\n\n  if (!video) {\n    return <div />;\n  }\n\n  return (\n    <>\n      {!isLoading && (\n        <div className='video-info-box'>\n          <Image className='channel-image' src={channel.snippet.thumbnails.medium.url} circular />\n          <div className='video-info'>\n            <div className='channel-name'>{channel.snippet.title}</div>\n            <div className='video-publication-date'>{publishedAtString}</div>\n          </div>\n          <Button type='subscribe' color='youtube'>\n            {getSubscriberButtonText()}\n          </Button>\n          <div className='video-description'>\n            <DescriptionParagraphs video={video} descriptionTextClass={descriptionTextClass} />\n            <Button onClick={onToggleCollapseButtonClick}>{buttonTitle}</Button>\n          </div>\n        </div>\n      )}\n      {hasError && <>something wrong</>}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}