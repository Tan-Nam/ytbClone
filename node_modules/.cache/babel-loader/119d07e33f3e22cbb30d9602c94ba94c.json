{"ast":null,"code":"var _jsxFileName = \"E:\\\\fileExFrZip\\\\RFP\\\\src\\\\component\\\\comment\\\\comment.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as commentAction from '../../state/action/comment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCommentForVideo } from '../../state/reducer/comment';\nimport { CommentDetail } from './comment-detail/comment-detail';\nimport { CommentHeader } from './comment-header/comment-header';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Comment(props) {\n  _s();\n\n  const {\n    videoId\n  } = props;\n  const commentList = useSelector(getCommentForVideo);\n  const dispatch = useDispatch(); //\n\n  useEffect(() => {\n    dispatch(commentAction.commentList.request(videoId));\n  }, [videoId]);\n\n  if (!commentList) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"no data... \"\n    }, void 0, false);\n  }\n\n  const comment = commentList === null || commentList === void 0 ? void 0 : commentList.map(commentDetail => {\n    return /*#__PURE__*/_jsxDEV(CommentDetail, {\n      comment: commentDetail\n    }, commentDetail.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CommentHeader, {\n      amountComments: commentList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), comment]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Comment, \"3uKOqNEfbR3LYjcT+r/Y5rxvJpY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["E:/fileExFrZip/RFP/src/component/comment/comment.tsx"],"names":["useEffect","commentAction","useDispatch","useSelector","getCommentForVideo","CommentDetail","CommentHeader","Comment","props","videoId","commentList","dispatch","request","comment","map","commentDetail","id","length"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,aAAZ,MAA+B,4BAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,aAAT,QAA8B,iCAA9B;;;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAA6B;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,QAAME,WAAW,GAAGP,WAAW,CAACC,kBAAD,CAA/B;AAEA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B,CAJkC,CAMlC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACV,aAAa,CAACS,WAAd,CAA0BE,OAA1B,CAAkCH,OAAlC,CAAD,CAAR;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAI,CAACC,WAAL,EAAkB;AAChB,wBAAO;AAAA;AAAA,qBAAP;AACD;;AACD,QAAMG,OAAO,GAAGH,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEI,GAAb,CAAkBC,aAAD,IAAwB;AACvD,wBAAO,QAAC,aAAD;AAAe,MAAA,OAAO,EAAEA;AAAxB,OAA4CA,aAAa,CAACC,EAA1D;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFe,CAAhB;AAIA,sBACE;AAAA,4BACE,QAAC,aAAD;AAAe,MAAA,cAAc,EAAEN,WAAW,CAACO;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,EAEGJ,OAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAxBeN,O;UAEMJ,W,EAEHD,W;;;KAJHK,O","sourcesContent":["import { useEffect } from 'react';\r\nimport * as commentAction from '../../state/action/comment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCommentForVideo } from '../../state/reducer/comment';\r\nimport { CommentDetail } from './comment-detail/comment-detail';\r\nimport { CommentHeader } from './comment-header/comment-header';\r\n\r\nexport function Comment(props: any) {\r\n  const { videoId } = props;\r\n  const commentList = useSelector(getCommentForVideo);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //\r\n  useEffect(() => {\r\n    dispatch(commentAction.commentList.request(videoId));\r\n  }, [videoId]);\r\n\r\n  if (!commentList) {\r\n    return <>no data... </>;\r\n  }\r\n  const comment = commentList?.map((commentDetail: any) => {\r\n    return <CommentDetail comment={commentDetail} key={commentDetail.id} />;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <CommentHeader amountComments={commentList.length} />\r\n      {comment}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}